---
AWSTemplateFormatVersion: 2010-09-09


Parameters:
  Name:
    Type: String
  LambdaBucket:
    Type: String
    Default: aws-shibboleth-reference-architecture
    Description: >
      The S3 bucket from which to fetch the templates used by this stack.
  SealerKeyVersionCount:
    Type: Number
    Default: 10
    Description: The number of versions of the sealear key to support

Resources:
  #This is a Secret resource with a randomly generated password in its SecretString JSON.
  SealerKeySecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Ref Name
      Description: "This is a secret for the Shibboleth sealer key"

  # This is a RotationSchedule resource. It configures rotation of the password for the referenced
  # secret using a Lambda rotation function. The first rotation happens immediately when
  # CloudFormation processes this resource type. All subsequent rotations are scheduled according to
  # the configured rotation rules. We explicitly depend on the SecretTargetAttachment resource to
  # ensure that the secret contains all the information necessary for rotation to succeed.
  SealerKeySecretRotationSchedule:
    Type: AWS::SecretsManager::RotationSchedule
    Properties:
      SecretId: !Ref SealerKeySecret
      RotationLambdaARN: !GetAtt SealerKeySecretRotationLambda.Arn
      RotationRules:
        AutomaticallyAfterDays: 1

  #This is a Lambda Permission resource that grants Secrets Manager permission to invoke the function
  SealerKeySecretRotationLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    DependsOn: SealerKeySecretRotationLambda
    Properties:
      FunctionName: !Sub ${AWS::StackName}-Rotator
      Action: 'lambda:InvokeFunction'
      Principal: secretsmanager.amazonaws.com

  # This is an IAM Role resource. It gets attached to the Lambda rotation function and grants
  # permissions to the function to retrieve and update the secret as part of the rotation process.
  # It also includes the required KMS permissions and CloudWatch logging permissions.
  SealerKeySecretRotationLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-RotatorRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        -
          PolicyName: !Sub ${AWS::StackName}-RotationPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action:
                  - "secretsmanager:DescribeSecret"
                  - "secretsmanager:GetSecretValue"
                  - "secretsmanager:PutSecretValue"
                  - "secretsmanager:UpdateSecretVersionStage"
                Resource: !Sub 'arn:${AWS::Partition}:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:*'
                Condition:
                  StringEquals:
                    secretsmanager:resource/AllowRotationLambdaArn: !Sub 'arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:${AWS::StackName}-Rotator'
              -
                Effect: "Allow"
                Action:
                  - "secretsmanager:GetRandomPassword"
                Resource: "*"
              -
                Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "arn:aws:logs:*:*:*"
              -
                Effect: "Allow"
                Action:
                  - "kms:Decrypt"
                  - "kms:DescribeKey"
                  - "kms:GenerateDataKey"
                Resource: "*"

  # This is a Lambda Function resource. We use this to create the rotation function that rotate
  # our secret. For details about rotation Lambdas, see:
  # https://docs.aws.amazon.com/secretsmanager/latest/userguide/rotating-secrets.html
  # This example assumes that the Lambda code is already present in an S3 bucket, and that it
  # is coded to rotate a MySQL database password
  SealerKeySecretRotationLambda:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.7
      Role: !GetAtt SealerKeySecretRotationLambdaExecutionRole.Arn
      Handler: lambda_function.lambda_handler
      Description: 'This is a lambda to rotate sealer key'
      FunctionName: !Sub ${AWS::StackName}-Rotator
      Environment:
        Variables:
          SECRETS_MANAGER_ENDPOINT: !Sub 'https://secretsmanager.${AWS::Region}.amazonaws.com'
          SEALER_KEY_VERSION_COUNT: !Ref SealerKeyVersionCount
      Code:
        S3Bucket: !Ref LambdaBucket
        S3Key: 'functions/packages/rotate_sealer_key_secret/rotate_sealer_key_sercret.zip'

Outputs:
  SealerKeyArn:
    Value: !Ref SealerKeySecret
